package -->

	chocolatey -->
		
		install chocolatey --> 
					Set-ExecutionPolicy Bypass -Scope Process -Force; 
					[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
					iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
	
		search --> choco search <package-name>
		install --> choco install <package-name> -y
	
		version --> choco -v
		locale packages --> choco list

		update all --> choco upgrade all -y


	winget -->

		search --> winget search <package-name>
		install --> winget install <package-name>



security -->

	administrator --> 

		gui verification --> Start-Process wt -Verb runAs
		password verification --> 
			ware-1 --> Start-Process -FilePath "wt" -Credential administrator
			
			ware-2 -->
				$Username = "Administrator"
				$Password = ConvertTo-SecureString "SifreniziBurayaYazın" -AsPlainText -Force
				$Cred = New-Object System.Management.Automation.PSCredential($Username, $Password)
				Start-Process -FilePath "wt.exe" -Credential $Cred

		enable --> Enable-LocalUser -Name "Administrator"
		disable --> Disable-LocalUser -Name "Administrator"

		change password -->
			$Password = Read-Host "Yeni şifreyi girin" -AsSecureString
			Set-LocalUser -Name "Administrator" -Password $Password



	firewall -->
		disable --> Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False



	user -->

		init ps 7.* --> Import-Module microsoft.powershell.localaccounts -UseWindowsPowerShell
		init ps 5.* --> Import-Module microsoft.powershell.localaccounts

		create -->

			New-LocalUser -Name "misafir" -Password (ConvertTo-SecureString "1453" -AsPlainText -Force) -FullName "Misafir" -Description "A guest user account"

		add to group -->

			Add-LocalGroupMember -Group "Users" -Member "misafir"

		delete -->
			
			Remove-LocalUser -Name "misafir"



service -->

	list --> Get-Service

	arg --> 
		--> Get-Service -Name W32Time
		--> Get-Service -Displayname "Windows Time"

	like --> 
		--> Get-Service | Where-Object { $_.Name -like "*sql*" }
		--> Get-Service | Where-Object { $_.DisplayName -like "*sql*" }






system -->		

	restart --> Restart-Computer

	env -->

		get variables--> 

			[Environment]::GetEnvironmentVariables("User")
	
		get variable -->

			[Environment]::GetEnvironmentVariable("PATH", "User")

		set variable --> 

			$oldPath = [Environment]::GetEnvironmentVariable("PATH", "User")
			$newPath = 'C:\example;' + $oldPath
			[Environment]::SetEnvironmentVariable("PATH", $newPath, "User")




hyper-v -->

	install --> Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -All -NoRestart

	list --> Get-VM

	enable cpu --> Set-VMProcessor -VMName "VM-NAME" -ExposeVirtualizationExtensions $true

	start --> Start-VM -Name "VM-NAME"
	stop --> Stop-VM -Name "VM-NAME"

	delete --> Remove-VM -Name "VM-NAME" -Force




shell -->	

	info -->
		general --> $PSVersionTable

		commands --> Get-Command


	policy -->
		list --> Get-ExecutionPolicy -List

		get --> Get-ExecutionPolicy
			
		set --> Set-ExecutionPolicy <policy> => RemoteSigned | Bypass | Unrestricted

		
	profile --> 
		check --> Test-Path $PROFILE
		create --> New-Item -Path $PROFILE -ItemType File -Force
		edit --> code $PROFILE
		confirm --> . $PROFILE
