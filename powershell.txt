package -->

	chocolatey -->
	
		search --> choco search <package-name>
		install --> choco install <package-name> -y


	winget -->

		search --> winget search <package-name>
		install --> winget install <package-name>



security -->

	administrator --> 
		verification -->
			gui --> Start-Process wt -Verb runAs
			password --> Start-Process -FilePath "wt" -Credential administrator

		status -->
			enable --> Enable-LocalUser -Name "Administrator"
			disable --> Disable-LocalUser -Name "Administrator"

		change password -->
			$Password = Read-Host "Yeni ÅŸifreyi girin" -AsSecureString
			Set-LocalUser -Name "Administrator" -Password $Password


	user -->
		init -->
			ps 7.* --> Import-Module microsoft.powershell.localaccounts -UseWindowsPowerShell
			ps 5.* --> Import-Module microsoft.powershell.localaccounts

		create -->
			$password = ConvertTo-SecureString "1453" -AsPlainText -Force
			New-LocalUser -Name "misafir" -Password $password -FullName "Misafir" -Description "A guest user account"

		add to group -->
			Add-LocalGroupMember -Group "Users" -Member "misafir"

		delete -->
			Remove-LocalUser -Name "misafir"


	firewall -->
		disable --> Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False


service -->

	list --> Get-Service

		arg --> 
			--> Get-Service -Name W32Time
			--> Get-Service -Displayname "Windows Time"

		like --> 
			--> Get-Service | Where-Object { $_.Name -like "*sql*" }
			--> Get-Service | Where-Object { $_.DisplayName -like "*sql*" }

	stop --> 
		arg --> Stop-Service -Name "sshd"

	disable -->
		arg --> Set-Service -Name sshd -StartupType Disabled

	remove --> 
		arg --> Remove-Service -Name "sshd"




system -->		

	restart --> Restart-Computer

	env -->

		get variables--> 

			[Environment]::GetEnvironmentVariables("User")
	
		get variable -->

			[Environment]::GetEnvironmentVariable("PATH", "User")

		set variable --> 

			$oldPath = [Environment]::GetEnvironmentVariable("PATH", "User")
			$newPath = 'C:\example;' + $oldPath
			[Environment]::SetEnvironmentVariable("PATH", $newPath, "User")




hyper-v -->

	install --> Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -All -NoRestart

	list --> Get-VM

	enable cpu --> Set-VMProcessor -VMName "VM-NAME" -ExposeVirtualizationExtensions $true

	start --> Start-VM -Name "VM-NAME"
	stop --> Stop-VM -Name "VM-NAME"

	delete --> Remove-VM -Name "VM-NAME" -Force



registry -->
	 psdrive -->
		root ls --> Get-PSDrive | Where-Object {$_.Provider -like "*Registry*"}

		add root --> 
			New-PSDrive -Name HKCU -PSProvider Registry -Root HKEY_CURRENT_USER
			New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE
			New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT
			New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS
			New-PSDrive -Name HKCC -PSProvider Registry -Root HKEY_CURRENT_CONFIG



cert -->
	ls --> Get-ChildItem Cert:\CurrentUser\My




psdrive --> 
	ls --> Get-PSDrive


shell -->	

	info -->
		general --> $PSVersionTable

		commands --> Get-Command


	policy -->
		list --> Get-ExecutionPolicy -List

		get --> Get-ExecutionPolicy
			
		set --> Set-ExecutionPolicy <policy> => RemoteSigned | Bypass | Unrestricted

		
	profile --> 
		check --> Test-Path $PROFILE
		create --> New-Item -Path $PROFILE -ItemType File -Force
		edit --> code $PROFILE
		confirm --> . $PROFILE


