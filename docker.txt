help -->  docker --help


system -->

	info --> docker system df
	clean --> docker system prune


container -->

	run --> docker run [args] <image-name> 

		args --> 
			-d
			-it
			-p <port>:<port> 
			--name <container-name> 
			--restart always
			
			-v /path/data/:/var/data 
			-e <variable>=<value>
			--network <network-name>

	rename --> docker rename <my-old-container> <my-new-container>

	list --> docker ps
	full list --> docker ps -a

	formatted full list -->
			docker ps -a --format "{{.ID}}: {{.Names}}"

			diÄŸer formatlar --> 
				{{.Command}} - {{.Status}} -  {{.CreatedAt}} - {{.RunningFor}} - {{.Ports}} - {{.Networks}}

	log --> docker logs -f <container-name-or-id> 

	conn --> docker exec -it <container-name-or-id> /bin/bash
	info --> docker inspect <container-name-or-id>

	start --> docker start <container-name-or-id> 
	stop --> docker stop <container-name-or-id> 

	del --> docker rm <container-name-or-id> 

	clear --> docker container prune


copy -->
	os to docker -->
		docker cp <path> <container_id>:<path>

	docker to os -->
		docker cp <container_id>:<path> <path>


image -->

	list --> docker images	

	indir --> docker pull <image_name>
	build --> docker build --build-arg NODE_ENV=development -t <image-name> .
	commit --> docker commit <container-name-or-id> <image-name>

	tag --> docker tag <my-old-image> <my-new-image>

	del --> docker rmi <image-name-or-id> 

	clear --> docker image prune



volume-->

	list --> docker volume ls
	create --> docker volume create <volume-name>
	info --> docker volume inspect <volume-name>

	del --> docker volume rm <volume-name>

	clear --> docker volume prune



compose -->

	up --> docker-compose up --build	
	build --> docker-compose build <service-name>

	run --> docker-compose up
	stop --> docker-compose down



network -->

	list -->  docker network ls

	create --> docker network create [args] <network-name>
	
		args -->
			-d <driver-name>
			--subnet=192.168.1.0/24 
			--gateway=192.168.1.1 
			-o parent=eth0


swarm -->

	init --> docker swarm init --advertise-addr 192.168.1.104
	leave --> docker swarm leave --force

 	node -->
		list --> docker node ls
		ip --> docker node inspect <node-ID> --format '{{ .Status.Addr }}'

	service -->
		list --> docker service ls
		create --> docker service create --name my-nginx --publish 8080:80 --replicas 2 nginx
		scale --> docker service scale my-nginx=3








